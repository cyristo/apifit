package apifit.api;

import static apifit.common.ApiFitConstants.DELETE;
import static apifit.common.ApiFitConstants.GET;
import static apifit.common.ApiFitConstants.JSON_CONTENT_TYPE;
import static apifit.common.ApiFitConstants.POST;
import static apifit.common.ApiFitConstants.PUT;
import static com.jayway.restassured.RestAssured.config;
import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.config.DecoderConfig.decoderConfig;
import static com.jayway.restassured.config.RedirectConfig.redirectConfig;

import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.config.DecoderConfig.ContentDecoder;
import com.jayway.restassured.response.Header;
import com.jayway.restassured.response.Response;
import com.jayway.restassured.specification.RequestSpecification;

import apifit.common.ApiFitException;
import apifit.contract.IAPIClient;
import apifit.json.JsonToolBox;

public class APIClient implements IAPIClient {

	private String requestType = null;
	private Integer statusCode = null;
	private String responseBody = null;
	private String headers = null;
	private String[] requestFlow = null;
	private long requestTime;
	private String standardLog = "";
	private Map<String, String> cookies = null;
	private String location = null;

	public APIClient(String requestType) {
		this.requestType = requestType;
	}

	public void addCookies(Map<String, String> cookies) {
		this.cookies = cookies;
	}

	public Map<String, String> getCookies() {
		return cookies;
	}

	public void setContentEncoder(ContentDecoder decoder1, ContentDecoder decoder2) {
		if (decoder2 != null) {
			RestAssured.config = config().decoderConfig(decoderConfig().contentDecoders(decoder1, decoder2));
		} else {
			RestAssured.config = config().decoderConfig(decoderConfig().contentDecoders(decoder1));
		}


	}

	public void setProxy(String proxy) {
		RestAssured.proxy(proxy);
	}

	public boolean execute(String contentType, String URL, int checkStatus) throws ApiFitException {
		return execute(contentType, URL, checkStatus, null);
	}

	public boolean execute(String contentType, String URL, int checkStatus, String payload) throws ApiFitException {

		boolean wellDone = false;
		Response resp = null;
		//RestAssured.config = config().redirect(redirectConfig().followRedirects(true).and().allowCircularRedirects(true).and().maxRedirects(10));

		if (requestType == GET) {
			resp = initRequestSpecification(contentType, payload).get(URL);
		} else if (requestType == POST) {
			resp = initRequestSpecification(contentType, payload).post(URL);
		} else if (requestType == PUT) {
			resp = initRequestSpecification(contentType, payload).put(URL);
		} else if (requestType == DELETE) {
			resp = initRequestSpecification(contentType, payload).delete(URL);
		}
		//resp.then().log();
		statusCode = resp.getStatusCode();
		headers = resp.getHeaders().toString();
		
		
		if (statusCode == checkStatus) {
			wellDone = true;
		}

		if (resp.getContentType().contains(JSON_CONTENT_TYPE)) {
			JsonToolBox toolBox = new JsonToolBox();
			try {
				responseBody = toolBox.formatPretty(resp.getBody().asString());
				if (payload != null) payload = toolBox.formatPretty(payload);
			} catch (Exception e) {
				responseBody = resp.getBody().asString();;
			}

		} else {
			responseBody = resp.getBody().asString();;
		}

		cookies = resp.cookies();

		requestTime = resp.getTimeIn(TimeUnit.MILLISECONDS);
		initStandardLog(requestType, payload, URL);

		location = resp.getHeader("Location");
		
		return wellDone;
	}

	public Integer getStatusCode() {
		return statusCode;
	}
	public String getHeaders() {
		return headers;
	}
	public String getResponseBody() {
		return responseBody;
	}

	public long getRequestTime() {
		return requestTime;
	}
	public String getRequestTrace() {
		return standardLog;
	}
	public String getRedirectLocation() {
		return location;
	}

	private RequestSpecification initRequestSpecification(String contentType, String payload) {
		RequestSpecification reqSpec;
		/*
		Specify the cookies that'll be sent with the request as Map e.g:
		 Map<String, String> cookies = new HashMap<String, String>();
		 cookies.put("username", "John");
		 cookies.put("token", "1234");
		 given().cookies(cookies).then().expect().body(equalTo("username, token")).when().get("/cookie");
		 */	 
		if (cookies != null) {
			if (payload != null) {
				reqSpec = given()
						.config(RestAssured.config().redirect(redirectConfig().followRedirects(true)))
						.contentType(contentType)
						.cookies(cookies)
						//.sessionId(sessionId)
						.body(payload)
						.when();				
			} else {
				reqSpec = given()
						.config(RestAssured.config().redirect(redirectConfig().followRedirects(true)))
						.contentType(contentType)
						.cookies(cookies)
						//.sessionId(sessionId)
						.when();
			}

		} else {
			if (payload != null) {
				reqSpec = given()
						.config(RestAssured.config().redirect(redirectConfig().followRedirects(true)))
						.contentType(contentType)
						.body(payload)
						.when();
			} else {
				reqSpec = given()
						.config(RestAssured.config().redirect(redirectConfig().followRedirects(true)))
						.contentType(contentType)
						.when();	
			}
		}
		return reqSpec;
	}

	private void initStandardLog(String requestType, String payload, String URL) {

		if (payload == null) {
			requestFlow = new String[8];	
		} else {
			requestFlow = new String[10];
		}

		int i = 0;
		requestFlow[i++] = "**********************************************************************************************************";
		requestFlow[i++] = "REQUEST ACTION  : " + requestType + " " + URL;
		requestFlow[i++] = "REQUEST HEADERS : ";
		requestFlow[i++] = headers;
		if (payload != null) {
			requestFlow[i++] = "REQUEST PAYLOAD : ";
			requestFlow[i++] = payload;				
		}
		requestFlow[i++] = "RESPONSE STATUS : " + statusCode;
		requestFlow[i++] = "RESPONSE TIME   : " + requestTime;
		requestFlow[i++] = "RESPONSE BODY   : ";
		requestFlow[i++] = responseBody;

		for (int j = 0; j < requestFlow.length; j++) {
			standardLog = standardLog + requestFlow[j] + System.getProperty("line.separator");
		}

	}

}
